% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_functions.r
\name{lmls_bspline}
\alias{lmls_bspline}
\title{Fits a Local Maximum Likelihood (LML) regression model using B-splines}
\usage{
lmls_bspline(
  vector_x,
  response_vector_y,
  knot_count = 40,
  poly_degree = 3,
  order_difference_matrix_r = 2,
  max_iterations = 50,
  lambda_mu = 3,
  lambda_sigma = 500,
  opt_method = "GCV",
  lambda_acc = 50
)
}
\arguments{
\item{vector_x}{A vector of predictor values.}

\item{response_vector_y}{A vector of response values.}

\item{poly_degree}{The degree of the B-spline polynomials.}

\item{order_difference_matrix_r}{The order of the difference matrix used for penalty.}

\item{max_iterations}{The maximum number of iterations for the algorithm.}

\item{lambda_mu}{The tuning parameter (lambda) for updating the mean parameter.}

\item{lambda_sigma}{The tuning parameter (lambda) for updating the variance parameter.}

\item{opt_method}{The optimization method to use for tuning parameter selection ('GCV' or 'GAIC').}

\item{lambda_acc}{The tuning parameter for the optimization method.}

\item{knot_count}{The number of knots to use in the B-spline basis.}
}
\value{
A list containing the estimated mean (mu_hat), estimated variance (sigma_hat),
estimated B-spline coefficients (beta_hat), and estimated gamma coefficients for variance (gamma_hat).
}
\description{
This function fits a Local Maximum Likelihood (LML) regression model to the given data using B-splines.
It estimates the regression function by iteratively updating the mean and variance parameters, along with
the B-spline coefficients, until convergence is reached. The B-spline basis functions are used to model the
non-linear relationship between the predictors and the response.
}
\examples{
# Generate testing data
n <- 100
degree <- 3
noise_sd <- 0.4
number_knots <- 10
lower_boundary <- -5
upper_boundary <- 5

data <- generate_polynomial_data(n, degree, noise_sd, lower_boundary, upper_boundary)

# Fit the lmls_bspline model
result <- lmls_bspline(
  data$x, data$y, knot_count = 40, poly_degree = 3,
  order_difference_matrix_r = 2, max_iterations = 50, lambda_mu = 3, lambda_sigma = 500,
  opt_method = "GCV", lambda_acc = 50
)

# Print the result
print(result)

}
